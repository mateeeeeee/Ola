Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define external @GlobalIntX ptr 15


define external @GlobalIntY ptr 20


define external @GlobalFloatX ptr 7.5


define external @GlobalFloatY ptr 12.5


define internal @TestLessThanOperators void() {
entry:
%0 = alloca i64
store 5, ptr %0
%1 = alloca i64
store 10, ptr %1
%2 = alloca f64
store 2.5, ptr %2
%3 = alloca f64
store 5, ptr %3
%4 = load i64, ptr %0
%5 = load i64, ptr %1
%6 = icmp slt i64 %4, %5
call i8 %6, @Assert
%7 = load f64, ptr %2
%8 = load f64, ptr %3
%9 = fcmp olt f64 %7, %8
call i8 %9, @Assert
%10 = load i64, ptr %0
%11 = load i64, ptr @GlobalIntY
%12 = icmp slt i64 %10, %11
call i8 %12, @Assert
%13 = load f64, ptr %2
%14 = load f64, ptr @GlobalFloatY
%15 = fcmp olt f64 %13, %14
call i8 %15, @Assert
%16 = load i64, ptr %0
%17 = icmp slt i64 %16, 20
call i8 %17, @Assert
%18 = load f64, ptr %2
%19 = fcmp olt f64 %18, 7.5
call i8 %19, @Assert
%20 = load i64, ptr @GlobalIntX
%21 = load i64, ptr @GlobalIntY
%22 = icmp slt i64 %20, %21
call i8 %22, @Assert
%23 = load f64, ptr @GlobalFloatX
%24 = load f64, ptr @GlobalFloatY
%25 = fcmp olt f64 %23, %24
call i8 %25, @Assert
%26 = load i64, ptr @GlobalIntX
%27 = icmp slt i64 %26, 30
call i8 %27, @Assert
%28 = load f64, ptr @GlobalFloatX
%29 = fcmp olt f64 %28, 15
call i8 %29, @Assert
call i8 1, @Assert
%30 = fcmp olt f64 1.5, 2
call i8 %30, @Assert
br label exit
exit:
ret 
}


define internal @TestLessThanOrEqualOperators void() {
entry:
%0 = alloca i64
store 5, ptr %0
%1 = alloca i64
store 10, ptr %1
%2 = alloca f64
store 2.5, ptr %2
%3 = alloca f64
store 5, ptr %3
%4 = load i64, ptr %0
%5 = load i64, ptr %1
%6 = icmp sle i64 %4, %5
call i8 %6, @Assert
%7 = load f64, ptr %2
%8 = load f64, ptr %3
%9 = fcmp ole f64 %7, %8
call i8 %9, @Assert
%10 = load i64, ptr %0
%11 = load i64, ptr @GlobalIntY
%12 = icmp sle i64 %10, %11
call i8 %12, @Assert
%13 = load f64, ptr %2
%14 = load f64, ptr @GlobalFloatY
%15 = fcmp ole f64 %13, %14
call i8 %15, @Assert
%16 = load i64, ptr %0
%17 = icmp sle i64 %16, 20
call i8 %17, @Assert
%18 = load f64, ptr %2
%19 = fcmp ole f64 %18, 7.5
call i8 %19, @Assert
%20 = load i64, ptr @GlobalIntX
%21 = load i64, ptr @GlobalIntY
%22 = icmp sle i64 %20, %21
call i8 %22, @Assert
%23 = load f64, ptr @GlobalFloatX
%24 = load f64, ptr @GlobalFloatY
%25 = fcmp ole f64 %23, %24
call i8 %25, @Assert
%26 = load i64, ptr @GlobalIntX
%27 = icmp sle i64 %26, 15
call i8 %27, @Assert
%28 = load f64, ptr @GlobalFloatX
%29 = fcmp ole f64 %28, 7.5
call i8 %29, @Assert
call i8 1, @Assert
%30 = fcmp ole f64 1.5, 1.5
call i8 %30, @Assert
br label exit
exit:
ret 
}


define internal @TestGreaterThanOperators void() {
entry:
%0 = alloca i64
store 5, ptr %0
%1 = alloca i64
store 10, ptr %1
%2 = alloca f64
store 2.5, ptr %2
%3 = alloca f64
store 5, ptr %3
%4 = load i64, ptr %1
%5 = load i64, ptr %0
%6 = icmp sgt i64 %4, %5
call i8 %6, @Assert
%7 = load f64, ptr %3
%8 = load f64, ptr %2
%9 = fcmp ogt f64 %7, %8
call i8 %9, @Assert
%10 = load i64, ptr @GlobalIntX
%11 = load i64, ptr %1
%12 = icmp sgt i64 %10, %11
call i8 %12, @Assert
%13 = load f64, ptr @GlobalFloatX
%14 = load f64, ptr %3
%15 = fcmp ogt f64 %13, %14
call i8 %15, @Assert
%16 = load i64, ptr %1
%17 = icmp sgt i64 %16, 5
call i8 %17, @Assert
%18 = load f64, ptr %3
%19 = fcmp ogt f64 %18, 2.5
call i8 %19, @Assert
%20 = load i64, ptr @GlobalIntY
%21 = load i64, ptr @GlobalIntX
%22 = icmp sgt i64 %20, %21
call i8 %22, @Assert
%23 = load f64, ptr @GlobalFloatY
%24 = load f64, ptr @GlobalFloatX
%25 = fcmp ogt f64 %23, %24
call i8 %25, @Assert
%26 = load i64, ptr @GlobalIntY
%27 = icmp sgt i64 %26, 10
call i8 %27, @Assert
%28 = load f64, ptr @GlobalFloatY
%29 = fcmp ogt f64 %28, 5
call i8 %29, @Assert
call i8 1, @Assert
%30 = fcmp ogt f64 2, 1.5
call i8 %30, @Assert
br label exit
exit:
ret 
}


define internal @TestGreaterThanOrEqualOperators void() {
entry:
%0 = alloca i64
store 5, ptr %0
%1 = alloca i64
store 10, ptr %1
%2 = alloca f64
store 2.5, ptr %2
%3 = alloca f64
store 5, ptr %3
%4 = load i64, ptr %1
%5 = load i64, ptr %0
%6 = icmp sge i64 %4, %5
call i8 %6, @Assert
%7 = load f64, ptr %3
%8 = load f64, ptr %2
%9 = fcmp oge f64 %7, %8
call i8 %9, @Assert
%10 = load i64, ptr @GlobalIntX
%11 = load i64, ptr %1
%12 = icmp sge i64 %10, %11
call i8 %12, @Assert
%13 = load f64, ptr @GlobalFloatX
%14 = load f64, ptr %3
%15 = fcmp oge f64 %13, %14
call i8 %15, @Assert
%16 = load i64, ptr %1
%17 = icmp sge i64 %16, 5
call i8 %17, @Assert
%18 = load f64, ptr %3
%19 = fcmp oge f64 %18, 2.5
call i8 %19, @Assert
%20 = load i64, ptr @GlobalIntY
%21 = load i64, ptr @GlobalIntX
%22 = icmp sge i64 %20, %21
call i8 %22, @Assert
%23 = load f64, ptr @GlobalFloatY
%24 = load f64, ptr @GlobalFloatX
%25 = fcmp oge f64 %23, %24
call i8 %25, @Assert
%26 = load i64, ptr @GlobalIntY
%27 = icmp sge i64 %26, 15
call i8 %27, @Assert
%28 = load f64, ptr @GlobalFloatY
%29 = fcmp oge f64 %28, 7.5
call i8 %29, @Assert
call i8 1, @Assert
%30 = fcmp oge f64 2, 1.5
call i8 %30, @Assert
br label exit
exit:
ret 
}


define internal @TestEqualOperators void() {
entry:
%0 = alloca i64
store 5, ptr %0
%1 = alloca i64
store 10, ptr %1
%2 = alloca f64
store 2.5, ptr %2
%3 = alloca f64
store 5, ptr %3
%4 = load i64, ptr %0
%5 = load i64, ptr %1
%6 = icmp eq i64 %4, %5
%7 = icmp eq i8 %6, 0
call i8 %7, @Assert
%8 = load f64, ptr %2
%9 = load f64, ptr %3
%10 = fcmp oeq f64 %8, %9
%11 = icmp eq i8 %10, 0
call i8 %11, @Assert
%12 = load i64, ptr %0
%13 = load i64, ptr @GlobalIntX
%14 = icmp eq i64 %12, %13
%15 = icmp eq i8 %14, 0
call i8 %15, @Assert
%16 = load f64, ptr %2
%17 = load f64, ptr @GlobalFloatX
%18 = fcmp oeq f64 %16, %17
%19 = icmp eq i8 %18, 0
call i8 %19, @Assert
%20 = load i64, ptr %0
%21 = icmp eq i64 %20, 5
call i8 %21, @Assert
%22 = load f64, ptr %2
%23 = fcmp oeq f64 %22, 2.5
call i8 %23, @Assert
%24 = load i64, ptr @GlobalIntX
%25 = load i64, ptr @GlobalIntX
%26 = icmp eq i64 %24, %25
call i8 %26, @Assert
%27 = load f64, ptr @GlobalFloatX
%28 = load f64, ptr @GlobalFloatX
%29 = fcmp oeq f64 %27, %28
call i8 %29, @Assert
%30 = load i64, ptr @GlobalIntX
%31 = icmp eq i64 %30, 15
call i8 %31, @Assert
%32 = load f64, ptr @GlobalFloatX
%33 = fcmp oeq f64 %32, 7.5
call i8 %33, @Assert
call i8 1, @Assert
%34 = fcmp oeq f64 1.5, 1.5
call i8 %34, @Assert
br label exit
exit:
ret 
}


define internal @TestNotEqualOperators void() {
entry:
%0 = alloca i64
store 5, ptr %0
%1 = alloca i64
store 10, ptr %1
%2 = alloca f64
store 2.5, ptr %2
%3 = alloca f64
store 5, ptr %3
%4 = load i64, ptr %0
%5 = load i64, ptr %1
%6 = icmp ne i64 %4, %5
%7 = icmp eq i8 %6, 1
call i8 %7, @Assert
%8 = load f64, ptr %2
%9 = load f64, ptr %3
%10 = fcmp one f64 %8, %9
%11 = icmp eq i8 %10, 1
call i8 %11, @Assert
%12 = load i64, ptr %0
%13 = load i64, ptr @GlobalIntX
%14 = icmp ne i64 %12, %13
%15 = icmp eq i8 %14, 1
call i8 %15, @Assert
%16 = load f64, ptr %2
%17 = load f64, ptr @GlobalFloatX
%18 = fcmp one f64 %16, %17
%19 = icmp eq i8 %18, 1
call i8 %19, @Assert
%20 = load i64, ptr %0
%21 = icmp ne i64 %20, 10
call i8 %21, @Assert
%22 = load f64, ptr %2
%23 = fcmp one f64 %22, 5
call i8 %23, @Assert
%24 = load i64, ptr @GlobalIntX
%25 = load i64, ptr @GlobalIntY
%26 = icmp ne i64 %24, %25
%27 = icmp eq i8 %26, 1
call i8 %27, @Assert
%28 = load f64, ptr @GlobalFloatX
%29 = load f64, ptr @GlobalFloatY
%30 = fcmp one f64 %28, %29
%31 = icmp eq i8 %30, 1
call i8 %31, @Assert
%32 = load i64, ptr @GlobalIntX
%33 = icmp ne i64 %32, 20
%34 = icmp eq i8 %33, 1
call i8 %34, @Assert
%35 = load f64, ptr @GlobalFloatX
%36 = fcmp one f64 %35, 10
%37 = icmp eq i8 %36, 1
call i8 %37, @Assert
call i8 1, @Assert
%38 = fcmp one f64 1.5, 2
call i8 %38, @Assert
br label exit
exit:
ret 
}


define external @main i64() {
entry:
%0 = alloca i64
call ptr @TestLessThanOperators
call ptr @TestLessThanOrEqualOperators
call ptr @TestGreaterThanOperators
call ptr @TestGreaterThanOrEqualOperators
call ptr @TestEqualOperators
call ptr @TestNotEqualOperators
store 0, ptr %0
br label exit
return:
br label exit
exit:
%1 = load i64, ptr %0
ret i64 %1
}

