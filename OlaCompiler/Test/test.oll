Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @g ptr 9


define internal @ReturnRef ptr() {
entry:
%0 = alloca ptr
store ptr @g, ptr %0
br label exit
return:
br label exit
exit:
%1 = load ptr, ptr %0
ret ptr %1
}


define internal @ReturnValue i64() {
entry:
%0 = alloca i64
store ptr @g, ptr %0
br label exit
return:
br label exit
exit:
%1 = load i64, ptr %0
ret i64 %1
}


define internal @TestRefReturnSimple void() {
entry:
%0 = call ptr @ReturnRef
%1 = alloca ptr
store ptr %0, ptr %1
%2 = load ptr, ptr %1
%3 = load i64, ptr %2
%4 = alloca ptr
store i64 %3, ptr %4
%5 = add i64 %3, 1
store i64 %5, ptr %2
%6 = load i64, ptr @g
%7 = icmp eq i64 %6, 10
call i8 %7, @Assert
%8 = call ptr @ReturnRef
%9 = load i64, ptr %8
%10 = alloca i64
store i64 %9, ptr %10
%11 = load i64, ptr %10
%12 = alloca ptr
store i64 %11, ptr %12
%13 = add i64 %11, 1
store i64 %13, ptr %10
%14 = load i64, ptr @g
%15 = icmp eq i64 %14, 10
call i8 %15, @Assert
%16 = call ptr @ReturnValue
%17 = alloca i64
store i64 %16, ptr %17
%18 = load i64, ptr %17
%19 = alloca ptr
store i64 %18, ptr %19
%20 = add i64 %18, 1
store i64 %20, ptr %17
%21 = load i64, ptr @g
%22 = icmp eq i64 %21, 10
call i8 %22, @Assert
br label exit
exit:
ret 
}


define external @main i64() {
entry:
%0 = alloca i64
call ptr @TestRefReturnSimple
store 0, ptr %0
br label exit
return:
br label exit
exit:
%1 = load i64, ptr %0
ret i64 %1
}

