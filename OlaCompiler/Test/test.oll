Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


declare @IsAlnum i8(i8)


declare @IsAlpha i8(i8)


declare @IsLower i8(i8)


declare @IsUpper i8(i8)


declare @IsDigit i8(i8)


declare @IsSpace i8(i8)


declare @ToLower i8(i8)


declare @ToUpper i8(i8)


declare @StringToFloat f64(ptr)


declare @StringToInt i64(ptr)


declare @StringCopy void(ptr,ptr,i64)


define internal @globalString ptr global


define internal @PassStringLiteral__C0 void(ptr) {
entry:
%0 = alloca ptr
store ptr %literal, ptr %0
%1 = load ptr, ptr %0
%2 = ptr add ptr %1, 0
%3 = load i8, ptr %2
%4 = icmp eq i8 %3, 76
call i8 %4, @Assert
br label exit
exit:
ret 
}


define internal @PassStringVariable__C0 void(ptr) {
entry:
%0 = alloca ptr
store ptr %variable, ptr %0
%1 = load ptr, ptr %0
%2 = ptr add ptr %1, 0
%3 = load i8, ptr %2
%4 = icmp eq i8 %3, 108
call i8 %4, @Assert
br label exit
exit:
ret 
}


define external @main i64() {
entry:
%0 = alloca i64
call i8 1, @Assert
%1 = alloca i8[6]
%2 = ptr add ptr %1, 0
store 108, ptr %2
%3 = ptr add ptr %1, 1
store 111, ptr %3
%4 = ptr add ptr %1, 2
store 99, ptr %4
%5 = ptr add ptr %1, 3
store 97, ptr %5
%6 = ptr add ptr %1, 4
store 108, ptr %6
%7 = ptr add ptr %1, 5
store 0, ptr %7
call i8 1, @Assert
%8 = alloca ptr
%9 = ptr add ptr %1, 0
store ptr %9, ptr %8
%10 = load ptr, ptr %8
%11 = ptr add ptr %10, 0
%12 = load i8, ptr %11
%13 = icmp eq i8 %12, 108
call i8 %13, @Assert
call ptr @__StringLiteral1, @PassStringLiteral__C0
call ptr %1, @PassStringVariable__C0
store 0, ptr %0
br label exit
return:
br label exit
exit:
%14 = load i64, ptr %0
ret i64 %14
}


define internal @__StringLiteral0 ptr local


define internal @__StringLiteral1 ptr Literal

