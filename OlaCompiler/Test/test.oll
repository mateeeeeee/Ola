Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define external @GlobalIntX ptr 8


define external @GlobalIntY ptr 3


define internal @TestShiftOperatorsIntegers void() {
entry:
%0 = alloca i64
store 5, ptr %0
%1 = alloca i64
store 2, ptr %1
%2 = load i64, ptr %0
%3 = load i64, ptr %1
%4 = shl i64 %2, %3
%5 = alloca i64
store i64 %4, ptr %5
%6 = load i64, ptr %5
%7 = icmp eq i64 %6, 20
call i8 %7, @Assert
%8 = load i64, ptr %0
%9 = load i64, ptr %1
%10 = ashr i64 %8, %9
%11 = alloca i64
store i64 %10, ptr %11
%12 = load i64, ptr %11
%13 = icmp eq i64 %12, 1
call i8 %13, @Assert
%14 = load i64, ptr %0
%15 = load i64, ptr @GlobalIntY
%16 = shl i64 %14, %15
%17 = alloca i64
store i64 %16, ptr %17
%18 = load i64, ptr %17
%19 = icmp eq i64 %18, 40
call i8 %19, @Assert
%20 = load i64, ptr %0
%21 = load i64, ptr @GlobalIntY
%22 = ashr i64 %20, %21
%23 = alloca i64
store i64 %22, ptr %23
%24 = load i64, ptr %23
%25 = icmp eq i64 %24, 0
call i8 %25, @Assert
%26 = load i64, ptr %0
%27 = shl i64 %26, 1
%28 = alloca i64
store i64 %27, ptr %28
%29 = load i64, ptr %28
%30 = icmp eq i64 %29, 10
call i8 %30, @Assert
%31 = load i64, ptr %0
%32 = ashr i64 %31, 1
%33 = alloca i64
store i64 %32, ptr %33
%34 = load i64, ptr %33
%35 = icmp eq i64 %34, 2
call i8 %35, @Assert
%36 = load i64, ptr @GlobalIntX
%37 = load i64, ptr @GlobalIntY
%38 = shl i64 %36, %37
%39 = alloca i64
store i64 %38, ptr %39
%40 = load i64, ptr %39
%41 = icmp eq i64 %40, 64
call i8 %41, @Assert
%42 = load i64, ptr @GlobalIntX
%43 = load i64, ptr @GlobalIntY
%44 = ashr i64 %42, %43
%45 = alloca i64
store i64 %44, ptr %45
%46 = load i64, ptr %45
%47 = icmp eq i64 %46, 1
call i8 %47, @Assert
%48 = load i64, ptr @GlobalIntX
%49 = shl i64 %48, 2
%50 = alloca i64
store i64 %49, ptr %50
%51 = load i64, ptr %50
%52 = icmp eq i64 %51, 32
call i8 %52, @Assert
%53 = load i64, ptr @GlobalIntX
%54 = ashr i64 %53, 2
%55 = alloca i64
store i64 %54, ptr %55
%56 = load i64, ptr %55
%57 = icmp eq i64 %56, 2
call i8 %57, @Assert
call i8 1, @Assert
call i8 1, @Assert
br label exit
exit:
ret 
}


define internal @TestCompoundShiftOperatorsIntegers void() {
entry:
%0 = alloca i64
store 5, ptr %0
%1 = alloca i64
store 2, ptr %1
%2 = load i64, ptr %0
%3 = load i64, ptr %1
%4 = shl i64 %2, %3
store i64 %4, ptr %0
%5 = load i64, ptr %0
%6 = icmp eq i64 %5, 20
call i8 %6, @Assert
%7 = load i64, ptr %0
%8 = load i64, ptr %1
%9 = ashr i64 %7, %8
store i64 %9, ptr %0
%10 = load i64, ptr %0
%11 = icmp eq i64 %10, 5
call i8 %11, @Assert
%12 = load i64, ptr @GlobalIntX
%13 = load i64, ptr @GlobalIntY
%14 = shl i64 %12, %13
store i64 %14, ptr @GlobalIntX
%15 = load i64, ptr @GlobalIntX
%16 = icmp eq i64 %15, 64
call i8 %16, @Assert
%17 = load i64, ptr @GlobalIntX
%18 = load i64, ptr @GlobalIntY
%19 = ashr i64 %17, %18
store i64 %19, ptr @GlobalIntX
%20 = load i64, ptr @GlobalIntX
%21 = icmp eq i64 %20, 8
call i8 %21, @Assert
%22 = load i64, ptr @GlobalIntY
%23 = shl i64 %22, 1
store i64 %23, ptr @GlobalIntY
%24 = load i64, ptr @GlobalIntY
%25 = icmp eq i64 %24, 6
call i8 %25, @Assert
%26 = load i64, ptr @GlobalIntY
%27 = ashr i64 %26, 1
store i64 %27, ptr @GlobalIntY
%28 = load i64, ptr @GlobalIntY
%29 = icmp eq i64 %28, 3
call i8 %29, @Assert
br label exit
exit:
ret 
}


define external @main i64() {
entry:
%0 = alloca i64
call ptr @TestShiftOperatorsIntegers
call ptr @TestCompoundShiftOperatorsIntegers
store 0, ptr %0
br label exit
return:
br label exit
exit:
%1 = load i64, ptr %0
ret i64 %1
}

