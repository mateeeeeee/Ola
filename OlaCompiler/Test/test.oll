Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @Global2dArray ptr [[1,2,],[3,4,],]


define external @main i64() {
entry:
%0 = alloca i64
%1 = alloca i64
store 0, ptr %1
%2 = alloca i64
store 0, ptr %2
%3 = alloca i64[2][2]
%4 = ptr add ptr %3, 0
store [1,2,], ptr %4
%5 = ptr add ptr %3, 16
store [3,4,], ptr %5
%6 = alloca i64
store 0, ptr %6
br label BB3
for.end:
%7 = alloca i64
store 0, ptr %7
br label BB7
BB3:
%8 = load i64, ptr %6
%9 = icmp slt i64 %8, 2
br i8 %9, label for.end, label BB5
BB4:
%10 = load i64, ptr %6
%11 = add i64 %10, 1
store i64 %11, ptr %6
br label BB3
BB5:
%12 = load i64, ptr %1
%13 = icmp eq i64 %12, 10
call i8 %13, @Assert
%14 = load i64, ptr %2
%15 = icmp eq i64 %14, 10
call i8 %15, @Assert
store 0, ptr %0
br label exit
return:
br label exit
for.end1:
%16 = load i64, ptr %6
%17 = gep ptr %3, 0, %16
%18 = load i64, ptr %7
%19 = gep ptr %17, 0, %18
%20 = load i64, ptr %1
%21 = load i64, ptr %19
%22 = add i64 %20, %21
store i64 %22, ptr %1
%23 = load i64, ptr %6
%24 = smul i64 %23, 2
%25 = gep ptr @Global2dArray, 0, %24
%26 = load i64, ptr %7
%27 = gep ptr %25, 0, %26
%28 = load i64, ptr %2
%29 = load i64, ptr %27
%30 = add i64 %28, %29
store i64 %30, ptr %2
br label BB8
BB7:
%31 = load i64, ptr %7
%32 = icmp slt i64 %31, 2
br i8 %32, label for.end1, label BB9
BB8:
%33 = load i64, ptr %7
%34 = add i64 %33, 1
store i64 %34, ptr %7
br label BB7
BB9:
br label BB4
exit:
%35 = load i64, ptr %0
ret i64 %35
}

