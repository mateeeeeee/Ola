Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @TestIfElseBasic void() {
entry:
%0 = alloca i64
store 10, ptr %0
%1 = alloca i64
store 20, ptr %1
%2 = load i64, ptr %0
%3 = load i64, ptr %1
%4 = icmp slt i64 %2, %3
br i8 %4, label if.then, label if.else
if.then:
call i8 1, @Assert
br label if.end
if.else:
call i8 0, @Assert
br label if.end
if.end:
%nop = neg i64 0
br label exit
exit:
ret 
}


define internal @TestIfElseMultipleConditions void() {
entry:
%0 = alloca i64
store 5, ptr %0
%1 = alloca i64
store 5, ptr %1
%2 = load i64, ptr %0
%3 = load i64, ptr %1
%4 = icmp sgt i64 %2, %3
br i8 %4, label if.then, label if.else
if.then:
call i8 0, @Assert
br label if.end
if.else:
%5 = load i64, ptr %0
%6 = load i64, ptr %1
%7 = icmp slt i64 %5, %6
br i8 %7, label if.then1, label if.else1
if.end:
%nop = neg i64 0
br label exit
if.then1:
call i8 0, @Assert
br label if.end1
if.else1:
call i8 1, @Assert
br label if.end1
if.end1:
%nop1 = neg i64 0
br label if.end
exit:
ret 
}


define internal @TestNestedIfElse void() {
entry:
%0 = alloca i64
store 42, ptr %0
%1 = load i64, ptr %0
%2 = icmp sgt i64 %1, 21
br i8 %2, label if.then, label if.else
if.then:
%3 = load i64, ptr %0
%4 = icmp sgt i64 %3, 0
br i8 %4, label if.then1, label if.else1
if.else:
call i8 0, @Assert
br label if.end
if.end:
%nop = neg i64 0
br label exit
if.then1:
call i8 1, @Assert
br label if.end1
if.else1:
call i8 0, @Assert
br label if.end1
if.end1:
%nop1 = neg i64 0
br label if.end
exit:
ret 
}


define internal @TestComplexNestedIfElse void() {
entry:
%0 = alloca i64
store 1, ptr %0
%1 = alloca i64
store 5, ptr %1
%2 = alloca i64
store 5, ptr %2
%3 = load i64, ptr %0
%4 = icmp sgt i64 %3, 0
br i8 %4, label if.then, label if.else
if.then:
%5 = load i64, ptr %1
%6 = icmp slt i64 %5, 10
br i8 %6, label if.then1, label if.else1
if.else:
%7 = load i64, ptr %1
%8 = icmp eq i64 %7, 0
br i8 %8, label if.then2, label if.else2
if.end:
%nop = neg i64 0
br label exit
if.then1:
%9 = load i64, ptr %2
%10 = icmp eq i64 %9, 5
br i8 %10, label if.then3, label if.else3
if.else1:
call i8 0, @Assert
br label if.end1
if.end1:
%nop1 = neg i64 0
br label if.end
if.then3:
call i8 1, @Assert
br label if.end2
if.else3:
call i8 0, @Assert
br label if.end2
if.end2:
%nop2 = neg i64 0
br label if.end1
if.then2:
call i8 0, @Assert
br label if.end3
if.else2:
%11 = load i64, ptr %2
%12 = icmp sgt i64 %11, 0
br i8 %12, label if.then4, label if.else4
if.end3:
%nop3 = neg i64 0
br label if.end
if.then4:
call i8 0, @Assert
br label if.end4
if.else4:
call i8 0, @Assert
br label if.end4
if.end4:
%nop4 = neg i64 0
br label if.end3
exit:
ret 
}


define internal @TestIfElseLogicalOperators void() {
entry:
%0 = alloca i64
store 15, ptr %0
%1 = load i64, ptr %0
%2 = icmp sgt i64 %1, 10
br i8 %2, label if.then, label if.else
if.then:
call i8 1, @Assert
br label if.end
if.else:
call i8 0, @Assert
br label if.end
if.end:
%nop = neg i64 0
br label exit
exit:
ret 
}


define external @main i64() {
entry:
%0 = alloca i64
call ptr @TestIfElseBasic
call ptr @TestIfElseMultipleConditions
call ptr @TestNestedIfElse
call ptr @TestComplexNestedIfElse
call ptr @TestIfElseLogicalOperators
store 0, ptr %0
br label exit
return:
%nop = neg i64 0
br label exit
exit:
%1 = load i64, ptr %0
ret i64 %1
}

