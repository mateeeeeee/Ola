Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @TestShiftOperatorsIntegers void() {
entry:
%0 = alloca i64
store 5, ptr %0
%1 = alloca i64
store 2, ptr %1
%2 = load i64, ptr %0
%3 = load i64, ptr %1
%4 = shl i64 %2, %3
%5 = alloca i64
store i64 %4, ptr %5
%6 = load i64, ptr %5
%7 = icmp eq i64 %6, 20
call i8 %7, @Assert
%8 = load i64, ptr %0
%9 = load i64, ptr %1
%10 = ashr i64 %8, %9
%11 = alloca i64
store i64 %10, ptr %11
%12 = load i64, ptr %11
%13 = icmp eq i64 %12, 1
call i8 %13, @Assert
exit:
ret 
}


define internal @TestCompoundShiftOperatorsIntegers void() {
entry:
%0 = alloca i64
store 5, ptr %0
%1 = alloca i64
store 2, ptr %1
%2 = load i64, ptr %0
%3 = load i64, ptr %1
%4 = shl i64 %2, %3
store i64 %4, ptr %0
%5 = load i64, ptr %0
%6 = icmp eq i64 %5, 20
call i8 %6, @Assert
%7 = load i64, ptr %0
%8 = load i64, ptr %1
%9 = ashr i64 %7, %8
store i64 %9, ptr %0
%10 = load i64, ptr %0
%11 = icmp eq i64 %10, 5
call i8 %11, @Assert
exit:
ret 
}


define external @main i64() {
entry:
%0 = alloca i64
call ptr @TestShiftOperatorsIntegers
call ptr @TestCompoundShiftOperatorsIntegers
store 0, ptr %0
br label exit
return:
%nop = neg i64 0
br label exit
exit:
%1 = load i64, ptr %0
ret i64 %1
}

