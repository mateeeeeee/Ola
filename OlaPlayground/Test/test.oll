Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @TestShortCircuitEvaluation void() {
entry:
%0 = and i8 0, 1
%1 = icmp ne i8 %0, 0
br i8 %1, label if.then, label if.else
if.then:
call i8 0, @Assert
br label if.end
if.else:
call i8 1, @Assert
br label if.end
if.end:
%2 = or i8 1, 1
%3 = icmp ne i8 %2, 0
br i8 %3, label if.then1, label if.else1
if.then1:
call i8 1, @Assert
br label exit
if.else1:
call i8 0, @Assert
br label exit
exit:
ret 
}


define internal @TestIfElseWithBooleanLiterals void() {
entry:
br label if.then
if.then:
call i8 1, @Assert
br label if.then1
if.then1:
call i8 1, @Assert
br label exit
exit:
ret 
}


define external @main i64() {
entry:
br label if.then.inlined
entry.split.split.split.split.split:
call ptr @TestIfElseWithBooleanLiterals
call ptr @TestShortCircuitEvaluation
br label exit
if.then.inlined1:
call i8 1, @Assert
br label entry.split.split.split.split.split
if.then.inlined2:
call i8 1, @Assert
br label if.then.inlined1
if.then.inlined3:
call i8 1, @Assert
br label if.then.inlined2
if.else.inlined:
call i8 1, @Assert
br label if.then.inlined3
if.then.inlined:
call i8 1, @Assert
br label if.else.inlined
exit:
ret i64 0
}

