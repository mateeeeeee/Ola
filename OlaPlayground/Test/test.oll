Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @TestDoWhileLoopInt void() {
entry:
br label dowhile.body
dowhile.body:
%0 = phi i64 [ 1, entry ], [ %1, dowhile.cond ]
%2 = phi i64 [ 0, entry ], [ %3, dowhile.cond ]
%3 = add i64 %2, %0
%4 = alloca ptr
store i64 %0, ptr %4
%1 = add i64 %0, 1
br label dowhile.cond
dowhile.cond:
%5 = icmp sle i64 %1, 5
br i8 %5, label dowhile.body, label dowhile.end
dowhile.end:
%6 = icmp eq i64 %3, 15
call i8 %6, @Assert
br label exit
exit:
ret 
}


define internal @TestDoWhileLoopBool void() {
entry:
br label dowhile.body
dowhile.body:
%0 = phi i64 [ 0, entry ], [ %1, dowhile.cond ]
%2 = phi i8 [ 1, entry ], [ %3, dowhile.cond ]
%4 = alloca ptr
store i64 %0, ptr %4
%1 = add i64 %0, 1
%5 = icmp eq i64 %1, 3
br i8 %5, label if.then, label if.end
dowhile.cond:
br i8 %3, label dowhile.body, label dowhile.end
dowhile.end:
%6 = icmp eq i64 %1, 3
call i8 %6, @Assert
br label exit
if.then:
br label if.end
if.end:
%3 = phi i8 [ %2, dowhile.body ], [ 0, if.then ]
br label dowhile.cond
exit:
ret 
}


define internal @TestNestedDoWhileLoops void() {
entry:
%0 = alloca ptr
%1 = alloca ptr
br label dowhile.body
dowhile.body:
%2 = phi i64 [ 0, entry ], [ %3, dowhile.cond ]
%4 = phi i64 [ 0, entry ], [ %5, dowhile.cond ]
br label dowhile.body1
dowhile.cond:
%6 = icmp slt i64 %5, 3
br i8 %6, label dowhile.body, label dowhile.end
dowhile.end:
%7 = icmp eq i64 %5, 3
call i8 %7, @Assert
%8 = icmp eq i64 %3, 4
call i8 %8, @Assert
br label exit
dowhile.body1:
%9 = phi i64 [ %2, dowhile.body ], [ %3, dowhile.cond1 ]
store i64 %9, ptr %1
%3 = add i64 %9, 1
br label dowhile.cond1
dowhile.cond1:
%10 = icmp slt i64 %3, 2
br i8 %10, label dowhile.body1, label dowhile.end1
dowhile.end1:
store i64 %4, ptr %0
%5 = add i64 %4, 1
br label dowhile.cond
exit:
ret 
}


define internal @TestDoWhileLoopWithBreak void() {
entry:
br label dowhile.body
dowhile.body:
%0 = phi i64 [ 0, entry ], [ %1, dowhile.cond ]
%2 = phi i64 [ 1, entry ], [ %3, dowhile.cond ]
%1 = add i64 %0, %2
%4 = alloca ptr
store i64 %2, ptr %4
%3 = add i64 %2, 1
%5 = icmp sgt i64 %3, 5
br i8 %5, label dowhile.end, label dowhile.cond
dowhile.cond:
br label dowhile.body
dowhile.end:
%6 = icmp eq i64 %1, 15
call i8 %6, @Assert
br label exit
exit:
ret 
}


define internal @TestDoWhileLoopWithContinue void() {
entry:
br label dowhile.body
dowhile.body:
%0 = phi i64 [ 0, entry ], [ %1, dowhile.cond ]
%2 = phi i64 [ 0, entry ], [ %3, dowhile.cond ]
%4 = alloca ptr
store i64 %0, ptr %4
%1 = add i64 %0, 1
%5 = srem i64 %1, 2
%6 = icmp eq i64 %5, 0
br i8 %6, label if.then, label if.end
dowhile.cond:
%3 = phi i64 [ %2, if.then ], [ %7, if.end ]
%8 = icmp slt i64 %1, 5
br i8 %8, label dowhile.body, label dowhile.end
dowhile.end:
%9 = icmp eq i64 %3, 9
call i8 %9, @Assert
br label exit
if.then:
br label dowhile.cond
if.end:
%7 = add i64 %2, %1
br label dowhile.cond
exit:
ret 
}


define internal @TestEmptyDoWhileLoop void() {
entry:
br label dowhile.body
dowhile.body:
%0 = phi i64 [ 0, entry ], [ %1, dowhile.cond ]
br label dowhile.cond
dowhile.cond:
%1 = add i64 %0, 1
%2 = icmp slt i64 %1, 2
br i8 %2, label dowhile.body, label dowhile.end
dowhile.end:
%3 = icmp eq i64 %1, 2
call i8 %3, @Assert
br label exit
exit:
ret 
}


define internal @TestDoWhileLoopBoundary void() {
entry:
br label dowhile.body
dowhile.body:
%0 = phi i64 [ 0, entry ], [ %1, dowhile.end ]
%2 = alloca ptr
store i64 %0, ptr %2
%1 = add i64 %0, 1
br label dowhile.end
dowhile.end:
%3 = icmp eq i64 %1, 1
call i8 %3, @Assert
br label exit
exit:
ret 
}


define internal @TestDoWhileLoopWithMultipleVariables void() {
entry:
br label dowhile.body
dowhile.body:
%0 = phi i64 [ 1, entry ], [ %1, dowhile.cond ]
%2 = phi i64 [ 1, entry ], [ %0, dowhile.cond ]
%1 = add i64 %2, %0
br label dowhile.cond
dowhile.cond:
%3 = icmp slt i64 %1, 10
br i8 %3, label dowhile.body, label exit
exit:
ret 
}


define internal @TestDoWhileLoopComplexCondition void() {
entry:
br label dowhile.body
dowhile.body:
%0 = phi i64 [ 3, entry ], [ %1, dowhile.cond ]
%2 = phi i64 [ 0, entry ], [ %3, dowhile.cond ]
%4 = alloca ptr
store i64 %2, ptr %4
%3 = add i64 %2, 1
%5 = alloca ptr
store i64 %0, ptr %5
%1 = sub i64 %0, 1
br label dowhile.cond
dowhile.cond:
%6 = icmp slt i64 %3, 3
%7 = icmp sgt i64 %1, 0
%8 = and i8 %6, %7
%9 = icmp ne i8 %8, 0
br i8 %9, label dowhile.body, label dowhile.end
dowhile.end:
%10 = icmp eq i64 %3, 3
%11 = icmp eq i64 %1, 0
%12 = and i8 %10, %11
%13 = icmp ne i8 %12, 0
call i8 %13, @Assert
br label exit
exit:
ret 
}


define internal @TestDoWhileLoopChangingCondition void() {
entry:
br label dowhile.body
dowhile.body:
%0 = phi i64 [ 0, entry ], [ %1, dowhile.cond ]
%2 = phi i64 [ 0, entry ], [ %3, dowhile.cond ]
%4 = alloca ptr
store i64 %2, ptr %4
%5 = add i64 %2, 1
%6 = icmp eq i64 %5, 3
br i8 %6, label if.then, label if.end
dowhile.cond:
%7 = icmp slt i64 %3, 5
br i8 %7, label dowhile.body, label dowhile.end
dowhile.end:
%8 = icmp eq i64 %1, 13
call i8 %8, @Assert
br label exit
if.then:
br label if.end
if.end:
%3 = phi i64 [ %5, dowhile.body ], [ 10, if.then ]
%1 = add i64 %0, %3
br label dowhile.cond
exit:
ret 
}


define internal @TestDoWhileLoopMultipleExits void() {
entry:
br label dowhile.body
dowhile.body:
%0 = phi i64 [ 0, entry ], [ %1, dowhile.cond ]
%2 = alloca ptr
store i64 %0, ptr %2
%1 = add i64 %0, 1
%3 = icmp eq i64 %1, 5
br i8 %3, label if.then, label if.end
dowhile.cond:
br label dowhile.body
dowhile.end:
%4 = phi i8 [ 1, if.then ], [ 0, if.then1 ]
%5 = icmp eq i64 %1, 5
call i8 %5, @Assert
call i8 %4, @Assert
br label exit
if.then:
br label dowhile.end
if.end:
%6 = icmp sgt i64 %1, 10
br i8 %6, label if.then1, label dowhile.cond
if.then1:
br label dowhile.end
exit:
ret 
}


define external @main i64() {
entry:
call ptr @TestDoWhileLoopInt
call ptr @TestDoWhileLoopBool
call ptr @TestNestedDoWhileLoops
call ptr @TestDoWhileLoopWithBreak
call ptr @TestDoWhileLoopWithContinue
call ptr @TestEmptyDoWhileLoop
call ptr @TestDoWhileLoopBoundary
call ptr @TestDoWhileLoopWithMultipleVariables
call ptr @TestDoWhileLoopComplexCondition
call ptr @TestDoWhileLoopChangingCondition
call ptr @TestDoWhileLoopMultipleExits
br label exit
exit:
ret i64 0
}

