Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @sum__I__I__I__I__I__I__I__I__I__I i64(i64 %a,i64 %b,i64 %c,i64 %d,i64 %e,i64 %f,i64 %g,i64 %h,i64 %i,i64 %j) {
entry:
%0 = alloca i64
store i64 %a, ptr %0
%1 = alloca i64
store i64 %b, ptr %1
%2 = alloca i64
store i64 %c, ptr %2
%3 = alloca i64
store i64 %d, ptr %3
%4 = alloca i64
store i64 %e, ptr %4
%5 = alloca i64
store i64 %f, ptr %5
%6 = alloca i64
store i64 %g, ptr %6
%7 = alloca i64
store i64 %h, ptr %7
%8 = alloca i64
store i64 %i, ptr %8
%9 = alloca i64
store i64 %j, ptr %9
%10 = alloca i64
%11 = load i64, ptr %0
%12 = load i64, ptr %1
%13 = add i64 %11, %12
%14 = load i64, ptr %2
%15 = add i64 %13, %14
%16 = load i64, ptr %3
%17 = add i64 %15, %16
%18 = load i64, ptr %4
%19 = add i64 %17, %18
%20 = load i64, ptr %5
%21 = add i64 %19, %20
%22 = load i64, ptr %6
%23 = add i64 %21, %22
%24 = load i64, ptr %7
%25 = add i64 %23, %24
%26 = load i64, ptr %8
%27 = add i64 %25, %26
%28 = load i64, ptr %9
%29 = add i64 %27, %28
store i64 %29, ptr %10
br label exit
return:
br label exit
exit:
%30 = load i64, ptr %10
ret i64 %30
}


define external @main i64() {
entry:
%0 = alloca i64
%1 = call i64 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, @sum__I__I__I__I__I__I__I__I__I__I
%2 = alloca i64
store i64 %1, ptr %2
%3 = load i64, ptr %2
store i64 %3, ptr %0
br label exit
return:
br label exit
exit:
%4 = load i64, ptr %0
ret i64 %4
}

