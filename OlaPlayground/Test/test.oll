Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @sum__I__I__I__I__I__I__I__I__I__I__I i64(i64 %a,i64 %b,i64 %c,i64 %d,i64 %e,i64 %f,i64 %g,i64 %h,i64 %i,i64 %j,i64 %k) {
entry:
%0 = alloca i64
store i64 %a, ptr %0
%1 = alloca i64
store i64 %b, ptr %1
%2 = alloca i64
store i64 %c, ptr %2
%3 = alloca i64
store i64 %d, ptr %3
%4 = alloca i64
store i64 %e, ptr %4
%5 = alloca i64
store i64 %f, ptr %5
%6 = alloca i64
store i64 %g, ptr %6
%7 = alloca i64
store i64 %h, ptr %7
%8 = alloca i64
store i64 %i, ptr %8
%9 = alloca i64
store i64 %j, ptr %9
%10 = alloca i64
store i64 %k, ptr %10
%11 = alloca i64
%12 = load i64, ptr %0
%13 = load i64, ptr %1
%14 = add i64 %12, %13
%15 = load i64, ptr %2
%16 = add i64 %14, %15
%17 = load i64, ptr %3
%18 = add i64 %16, %17
%19 = load i64, ptr %4
%20 = add i64 %18, %19
%21 = load i64, ptr %5
%22 = add i64 %20, %21
%23 = load i64, ptr %6
%24 = add i64 %22, %23
%25 = load i64, ptr %7
%26 = add i64 %24, %25
%27 = load i64, ptr %8
%28 = add i64 %26, %27
%29 = load i64, ptr %9
%30 = add i64 %28, %29
%31 = load i64, ptr %10
%32 = add i64 %30, %31
store i64 %32, ptr %11
br label exit
return:
br label exit
exit:
%33 = load i64, ptr %11
ret i64 %33
}


define external @main i64() {
entry:
%0 = alloca i64
%1 = call i64 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, @sum__I__I__I__I__I__I__I__I__I__I__I
%2 = alloca i64
store i64 %1, ptr %2
%3 = load i64, ptr %2
store i64 %3, ptr %0
br label exit
return:
br label exit
exit:
%4 = load i64, ptr %0
ret i64 %4
}

