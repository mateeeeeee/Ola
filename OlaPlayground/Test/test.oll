Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @GlobalIntX ptr 20


define internal @GlobalIntY ptr 4


define internal @GlobalFloatX ptr 7.5


define internal @GlobalFloatY ptr 2.5


define internal @TestModulo void() {
entry:
%0 = alloca i64
%1 = alloca i64
%2 = and i64 17, 3
%3 = alloca i64
%4 = icmp eq i64 %2, 1
call i8 %4, @Assert
%5 = load i64, ptr @GlobalIntY
%6 = srem i64 17, %5
%7 = alloca i64
%8 = icmp eq i64 %6, 1
call i8 %8, @Assert
%9 = srem i64 17, 3
%10 = alloca i64
%11 = icmp eq i64 %9, 2
call i8 %11, @Assert
%12 = load i64, ptr @GlobalIntX
%13 = load i64, ptr @GlobalIntY
%14 = srem i64 %12, %13
%15 = alloca i64
%16 = icmp eq i64 %14, 0
call i8 %16, @Assert
%17 = load i64, ptr @GlobalIntX
%18 = srem i64 %17, 3
%19 = alloca i64
%20 = icmp eq i64 %18, 2
call i8 %20, @Assert
%21 = srem i64 10, 3
%22 = icmp eq i64 %21, 1
call i8 %22, @Assert
%23 = srem i64 17, 3
%24 = icmp eq i64 %23, 2
call i8 %24, @Assert
br label exit
exit:
ret 
}


define external @main i64() {
entry:
%0 = alloca i64
call ptr @TestModulo
br label exit
return:
br label exit
exit:
ret i64 0
}

