Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @TestIfElse i64() {
entry:
%0 = alloca i64
%1 = alloca i64
store 6, ptr %1
%2 = load i64, ptr %1
%3 = icmp sgt i64 %2, 5
br i8 %3, label if.then, label if.else
if.then:
store 10, ptr %0
br label exit
return:
br label exit
if.else:
store 0, ptr %0
br label exit
return1:
br label exit
if.end:
br label exit
exit:
%4 = load i64, ptr %0
ret i64 %4
}


define internal @TestWhile i64() {
entry:
%0 = alloca i64
%1 = alloca i64
store 0, ptr %1
br label while.cond
while.cond:
%2 = load i64, ptr %1
%3 = icmp slt i64 %2, 10
br i8 %3, label while.body, label while.end
while.body:
%4 = load i64, ptr %1
%5 = icmp eq i64 %4, 5
br i8 %5, label if.then, label if.end
while.end:
store 0, ptr %0
br label exit
return:
br label exit
if.then:
%6 = load i64, ptr %1
%7 = smul i64 %6, 2
store i64 %7, ptr %0
br label exit
return1:
br label exit
if.else:
br label exit
if.end:
%8 = load i64, ptr %1
%9 = add i64 %8, 1
store i64 %9, ptr %1
br label while.cond
exit:
%10 = load i64, ptr %0
ret i64 %10
}


define external @main i64() {
entry:
%0 = alloca i64
%1 = call ptr @TestIfElse
%2 = alloca i64
store i64 %1, ptr %2
%3 = load i64, ptr %2
%4 = icmp eq i64 %3, 10
call i8 %4, @Assert
%5 = call ptr @TestWhile
store i64 %5, ptr %2
%6 = load i64, ptr %2
%7 = icmp eq i64 %6, 10
call i8 %7, @Assert
store 0, ptr %0
br label exit
return:
br label exit
exit:
%8 = load i64, ptr %0
ret i64 %8
}

