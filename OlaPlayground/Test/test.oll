Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @global_int_1 ptr 5


define internal @global_int_2 ptr 10


define internal @global_int_3 ptr 7


define internal @global_int_4 ptr 20


define internal @TestIntAddition void() {
entry:
call i8 1, @Assert
call i8 1, @Assert
%0 = load i64, ptr @global_int_1
%1 = load i64, ptr @global_int_2
%2 = add i64 %0, %1
%3 = icmp eq i64 %2, 15
call i8 %3, @Assert
%4 = load i64, ptr @global_int_1
%5 = add i64 %4, 10
%6 = icmp eq i64 %5, 15
call i8 %6, @Assert
%7 = load i64, ptr @global_int_3
%8 = add i64 %7, 5
%9 = icmp eq i64 %8, 12
call i8 %9, @Assert
br label exit
exit:
ret 
}


define external @main i64() {
entry:
br label entry.inlined
entry.split:
br label exit
exit.inlined:
br label entry.split
entry.inlined:
call i8 1, @Assert
call i8 1, @Assert
%0 = load i64, ptr @global_int_1
%1 = load i64, ptr @global_int_2
%2 = add i64 %0, %1
%3 = icmp eq i64 %2, 15
call i8 %3, @Assert
%4 = load i64, ptr @global_int_1
%5 = add i64 %4, 10
%6 = icmp eq i64 %5, 15
call i8 %6, @Assert
%7 = load i64, ptr @global_int_3
%8 = add i64 %7, 5
%9 = icmp eq i64 %8, 12
call i8 %9, @Assert
br label exit.inlined
return:
br label exit
exit:
ret i64 0
}

