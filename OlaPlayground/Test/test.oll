Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @global_int_1 ptr 5


define internal @global_int_2 ptr 10


define internal @global_int_3 ptr 7


define internal @global_int_4 ptr 20


define internal @global_sub_1 ptr 15


define internal @global_sub_2 ptr 7


define internal @global_sub_3 ptr 3


define internal @global_sub_4 ptr 30


define internal @global_float_1 ptr 3.5


define internal @global_float_2 ptr 2.5


define internal @global_float_3 ptr 1.2


define internal @global_float_4 ptr 5


define internal @TestIntAddition void() {
entry:
call i8 1, @Assert
call i8 1, @Assert
%0 = load i64, ptr @global_int_1
%1 = load i64, ptr @global_int_2
%2 = add i64 %0, %1
%3 = icmp eq i64 %2, 15
call i8 %3, @Assert
%4 = load i64, ptr @global_int_1
%5 = add i64 %4, 10
%6 = icmp eq i64 %5, 15
call i8 %6, @Assert
%7 = load i64, ptr @global_int_3
%8 = add i64 5, %7
%9 = icmp eq i64 %8, 12
call i8 %9, @Assert
br label exit
exit:
ret 
}


define internal @TestIntSubtraction void() {
entry:
call i8 1, @Assert
call i8 1, @Assert
%0 = load i64, ptr @global_sub_1
%1 = load i64, ptr @global_sub_2
%2 = sub i64 %0, %1
%3 = icmp eq i64 %2, 8
call i8 %3, @Assert
%4 = load i64, ptr @global_sub_4
%5 = sub i64 %4, 7
%6 = icmp eq i64 %5, 23
call i8 %6, @Assert
%7 = load i64, ptr @global_sub_3
%8 = sub i64 15, %7
%9 = icmp eq i64 %8, 12
call i8 %9, @Assert
br label exit
exit:
ret 
}


define internal @TestFloatAddition void() {
entry:
%0 = and i8 1, 1
%1 = icmp ne i8 %0, 0
call i8 %1, @Assert
%2 = and i8 1, 1
%3 = icmp ne i8 %2, 0
call i8 %3, @Assert
%4 = load f64, ptr @global_float_1
%5 = load f64, ptr @global_float_2
%6 = fadd f64 %4, %5
%7 = fcmp ogt f64 %6, 5.9999
%8 = fcmp olt f64 %6, 6.0001
%9 = and i8 %7, %8
%10 = icmp ne i8 %9, 0
call i8 %10, @Assert
%11 = load f64, ptr @global_float_1
%12 = fadd f64 %11, 2.5
%13 = fcmp ogt f64 %12, 5.9999
%14 = fcmp olt f64 %12, 6.0001
%15 = and i8 %13, %14
%16 = icmp ne i8 %15, 0
call i8 %16, @Assert
%17 = load f64, ptr @global_float_3
%18 = fadd f64 3.5, %17
%19 = fcmp ogt f64 %18, 4.6999
%20 = fcmp olt f64 %18, 4.7001
%21 = and i8 %19, %20
%22 = icmp ne i8 %21, 0
call i8 %22, @Assert
br label exit
exit:
ret 
}


define internal @TestFloatSubtraction void() {
entry:
%0 = and i8 1, 1
%1 = icmp ne i8 %0, 0
call i8 %1, @Assert
%2 = and i8 1, 1
%3 = icmp ne i8 %2, 0
call i8 %3, @Assert
%4 = load f64, ptr @global_float_4
%5 = load f64, ptr @global_float_2
%6 = fsub f64 %4, %5
%7 = fcmp ogt f64 %6, 2.4999
%8 = fcmp olt f64 %6, 2.5001
%9 = and i8 %7, %8
%10 = icmp ne i8 %9, 0
call i8 %10, @Assert
%11 = load f64, ptr @global_float_4
%12 = fsub f64 %11, 2.5
%13 = fcmp ogt f64 %12, 2.4999
%14 = fcmp olt f64 %12, 2.5001
%15 = and i8 %13, %14
%16 = icmp ne i8 %15, 0
call i8 %16, @Assert
%17 = load f64, ptr @global_float_3
%18 = fsub f64 5, %17
%19 = fcmp ogt f64 %18, 3.7999
%20 = fcmp olt f64 %18, 3.8001
%21 = and i8 %19, %20
%22 = icmp ne i8 %21, 0
call i8 %22, @Assert
br label exit
exit:
ret 
}


define external @main i64() {
entry:
call ptr @TestIntAddition
call ptr @TestIntSubtraction
call ptr @TestFloatAddition
call ptr @TestFloatSubtraction
br label exit
return:
br label exit
exit:
ret i64 0
}

