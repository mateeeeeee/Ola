Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @global_a ptr 5


define internal @global_b ptr 3


define internal @global_c ptr 7


define internal @global_d ptr 1


define internal @global_composite_and_a ptr 5


define internal @global_composite_and_b ptr 3


define internal @global_composite_and_c ptr 7


define internal @global_composite_or_a ptr 5


define internal @global_composite_or_b ptr 3


define internal @global_composite_or_c ptr 7


define internal @global_composite_xor_a ptr 5


define internal @global_composite_xor_b ptr 3


define internal @global_composite_xor_c ptr 7


define internal @TestBitAnd void() {
entry:
%0 = and i64 5, 3
%1 = alloca i64
store i64 %0, ptr %1
%2 = load i64, ptr %1
%3 = icmp eq i64 %2, 1
call i8 %3, @Assert
%4 = alloca i64
store 5, ptr %4
%5 = alloca i64
store 3, ptr %5
%6 = load i64, ptr %4
%7 = load i64, ptr %5
%8 = and i64 %6, %7
%9 = alloca i64
store i64 %8, ptr %9
%10 = load i64, ptr %9
%11 = icmp eq i64 %10, 1
call i8 %11, @Assert
%12 = load i64, ptr @global_a
%13 = load i64, ptr @global_b
%14 = and i64 %12, %13
%15 = alloca i64
store i64 %14, ptr %15
%16 = load i64, ptr %15
%17 = icmp eq i64 %16, 1
call i8 %17, @Assert
%18 = load i64, ptr %4
%19 = load i64, ptr @global_b
%20 = and i64 %18, %19
%21 = alloca i64
store i64 %20, ptr %21
%22 = load i64, ptr %21
%23 = icmp eq i64 %22, 1
call i8 %23, @Assert
%24 = load i64, ptr %5
%25 = and i64 5, %24
%26 = alloca i64
store i64 %25, ptr %26
%27 = load i64, ptr %26
%28 = icmp eq i64 %27, 1
call i8 %28, @Assert
%29 = load i64, ptr @global_a
%30 = and i64 %29, 3
%31 = alloca i64
store i64 %30, ptr %31
%32 = load i64, ptr %31
%33 = icmp eq i64 %32, 1
call i8 %33, @Assert
%34 = alloca i64
store 5, ptr %34
%35 = load i64, ptr %34
%36 = and i64 %35, 3
store i64 %36, ptr %34
%37 = load i64, ptr %34
%38 = icmp eq i64 %37, 1
call i8 %38, @Assert
%39 = alloca i64
store 5, ptr %39
%40 = alloca i64
store 3, ptr %40
%41 = load i64, ptr %39
%42 = load i64, ptr %40
%43 = and i64 %41, %42
store i64 %43, ptr %39
%44 = load i64, ptr %39
%45 = icmp eq i64 %44, 1
call i8 %45, @Assert
%46 = load i64, ptr @global_composite_and_a
%47 = load i64, ptr @global_composite_and_b
%48 = and i64 %46, %47
store i64 %48, ptr @global_composite_and_a
%49 = load i64, ptr @global_composite_and_a
%50 = icmp eq i64 %49, 1
call i8 %50, @Assert
%51 = load i64, ptr @global_composite_and_b
%52 = and i64 %51, 5
store i64 %52, ptr @global_composite_and_b
%53 = load i64, ptr @global_composite_and_b
%54 = icmp eq i64 %53, 1
call i8 %54, @Assert
%55 = alloca i64
store 2, ptr %55
%56 = load i64, ptr @global_composite_and_c
%57 = load i64, ptr %55
%58 = and i64 %56, %57
store i64 %58, ptr @global_composite_and_c
%59 = load i64, ptr @global_composite_and_c
%60 = icmp eq i64 %59, 2
call i8 %60, @Assert
br label exit
exit:
ret 
}


define internal @TestBitOr void() {
entry:
%0 = or i64 5, 3
%1 = alloca i64
store i64 %0, ptr %1
%2 = load i64, ptr %1
%3 = icmp eq i64 %2, 7
call i8 %3, @Assert
%4 = alloca i64
store 5, ptr %4
%5 = alloca i64
store 3, ptr %5
%6 = load i64, ptr %4
%7 = load i64, ptr %5
%8 = or i64 %6, %7
%9 = alloca i64
store i64 %8, ptr %9
%10 = load i64, ptr %9
%11 = icmp eq i64 %10, 7
call i8 %11, @Assert
%12 = load i64, ptr @global_a
%13 = load i64, ptr @global_b
%14 = or i64 %12, %13
%15 = alloca i64
store i64 %14, ptr %15
%16 = load i64, ptr %15
%17 = icmp eq i64 %16, 7
call i8 %17, @Assert
%18 = load i64, ptr %4
%19 = load i64, ptr @global_b
%20 = or i64 %18, %19
%21 = alloca i64
store i64 %20, ptr %21
%22 = load i64, ptr %21
%23 = icmp eq i64 %22, 7
call i8 %23, @Assert
%24 = load i64, ptr %5
%25 = or i64 5, %24
%26 = alloca i64
store i64 %25, ptr %26
%27 = load i64, ptr %26
%28 = icmp eq i64 %27, 7
call i8 %28, @Assert
%29 = load i64, ptr @global_a
%30 = or i64 %29, 3
%31 = alloca i64
store i64 %30, ptr %31
%32 = load i64, ptr %31
%33 = icmp eq i64 %32, 7
call i8 %33, @Assert
%34 = alloca i64
store 5, ptr %34
%35 = load i64, ptr %34
%36 = or i64 %35, 3
store i64 %36, ptr %34
%37 = load i64, ptr %34
%38 = icmp eq i64 %37, 7
call i8 %38, @Assert
%39 = alloca i64
store 5, ptr %39
%40 = alloca i64
store 3, ptr %40
%41 = load i64, ptr %39
%42 = load i64, ptr %40
%43 = or i64 %41, %42
store i64 %43, ptr %39
%44 = load i64, ptr %39
%45 = icmp eq i64 %44, 7
call i8 %45, @Assert
%46 = load i64, ptr @global_composite_or_a
%47 = load i64, ptr @global_composite_or_b
%48 = or i64 %46, %47
store i64 %48, ptr @global_composite_or_a
%49 = load i64, ptr @global_composite_or_a
%50 = icmp eq i64 %49, 7
call i8 %50, @Assert
%51 = load i64, ptr @global_composite_or_b
%52 = or i64 %51, 5
store i64 %52, ptr @global_composite_or_b
%53 = load i64, ptr @global_composite_or_b
%54 = icmp eq i64 %53, 7
call i8 %54, @Assert
%55 = alloca i64
store 2, ptr %55
%56 = load i64, ptr @global_composite_or_c
%57 = load i64, ptr %55
%58 = or i64 %56, %57
store i64 %58, ptr @global_composite_or_c
%59 = load i64, ptr @global_composite_or_c
%60 = icmp eq i64 %59, 7
call i8 %60, @Assert
br label exit
exit:
ret 
}


define internal @TestBitXor void() {
entry:
%0 = xor i64 5, 3
%1 = alloca i64
store i64 %0, ptr %1
%2 = load i64, ptr %1
%3 = icmp eq i64 %2, 6
call i8 %3, @Assert
%4 = alloca i64
store 5, ptr %4
%5 = alloca i64
store 3, ptr %5
%6 = load i64, ptr %4
%7 = load i64, ptr %5
%8 = xor i64 %6, %7
%9 = alloca i64
store i64 %8, ptr %9
%10 = load i64, ptr %9
%11 = icmp eq i64 %10, 6
call i8 %11, @Assert
%12 = load i64, ptr @global_a
%13 = load i64, ptr @global_b
%14 = xor i64 %12, %13
%15 = alloca i64
store i64 %14, ptr %15
%16 = load i64, ptr %15
%17 = icmp eq i64 %16, 6
call i8 %17, @Assert
%18 = load i64, ptr %4
%19 = load i64, ptr @global_b
%20 = xor i64 %18, %19
%21 = alloca i64
store i64 %20, ptr %21
%22 = load i64, ptr %21
%23 = icmp eq i64 %22, 6
call i8 %23, @Assert
%24 = load i64, ptr %5
%25 = xor i64 5, %24
%26 = alloca i64
store i64 %25, ptr %26
%27 = load i64, ptr %26
%28 = icmp eq i64 %27, 6
call i8 %28, @Assert
%29 = load i64, ptr @global_a
%30 = xor i64 %29, 3
%31 = alloca i64
store i64 %30, ptr %31
%32 = load i64, ptr %31
%33 = icmp eq i64 %32, 6
call i8 %33, @Assert
%34 = alloca i64
store 5, ptr %34
%35 = load i64, ptr %34
%36 = xor i64 %35, 3
store i64 %36, ptr %34
%37 = load i64, ptr %34
%38 = icmp eq i64 %37, 6
call i8 %38, @Assert
%39 = alloca i64
store 5, ptr %39
%40 = alloca i64
store 3, ptr %40
%41 = load i64, ptr %39
%42 = load i64, ptr %40
%43 = xor i64 %41, %42
store i64 %43, ptr %39
%44 = load i64, ptr %39
%45 = icmp eq i64 %44, 6
call i8 %45, @Assert
%46 = load i64, ptr @global_composite_xor_a
%47 = load i64, ptr @global_composite_xor_b
%48 = xor i64 %46, %47
store i64 %48, ptr @global_composite_xor_a
%49 = load i64, ptr @global_composite_xor_a
%50 = icmp eq i64 %49, 6
call i8 %50, @Assert
%51 = load i64, ptr @global_composite_xor_b
%52 = xor i64 %51, 5
store i64 %52, ptr @global_composite_xor_b
%53 = load i64, ptr @global_composite_xor_b
%54 = icmp eq i64 %53, 6
call i8 %54, @Assert
%55 = alloca i64
store 2, ptr %55
%56 = load i64, ptr @global_composite_xor_c
%57 = load i64, ptr %55
%58 = xor i64 %56, %57
store i64 %58, ptr @global_composite_xor_c
%59 = load i64, ptr @global_composite_xor_c
%60 = icmp eq i64 %59, 5
call i8 %60, @Assert
br label exit
exit:
ret 
}


define internal @TestBitNot void() {
entry:
%0 = alloca i64
store -6, ptr %0
%1 = load i64, ptr %0
%2 = icmp eq i64 %1, -6
call i8 %2, @Assert
%3 = alloca i64
store 0, ptr %3
%4 = load i64, ptr %3
%5 = icmp eq i64 %4, 0
call i8 %5, @Assert
%6 = alloca i64
store -1, ptr %6
%7 = load i64, ptr %6
%8 = icmp eq i64 %7, -1
call i8 %8, @Assert
%9 = alloca i64
store -256, ptr %9
%10 = load i64, ptr %9
%11 = icmp eq i64 %10, -256
call i8 %11, @Assert
%12 = alloca i64
store -65536, ptr %12
%13 = load i64, ptr %12
%14 = icmp eq i64 %13, -65536
call i8 %14, @Assert
%15 = alloca i64
store 5, ptr %15
%16 = load i64, ptr %15
%17 = not i64 %16
%18 = alloca i64
store i64 %17, ptr %18
%19 = load i64, ptr %18
%20 = icmp eq i64 %19, -6
call i8 %20, @Assert
%21 = alloca i64
store -1, ptr %21
%22 = load i64, ptr %21
%23 = not i64 %22
%24 = alloca i64
store i64 %23, ptr %24
%25 = load i64, ptr %24
%26 = icmp eq i64 %25, 0
call i8 %26, @Assert
%27 = load i64, ptr @global_a
%28 = not i64 %27
%29 = alloca i64
store i64 %28, ptr %29
%30 = load i64, ptr %29
%31 = icmp eq i64 %30, -6
call i8 %31, @Assert
%32 = load i64, ptr @global_c
%33 = not i64 %32
%34 = alloca i64
store i64 %33, ptr %34
%35 = load i64, ptr %34
%36 = icmp eq i64 %35, -8
call i8 %36, @Assert
br label exit
exit:
ret 
}


define external @main i64() {
entry:
%0 = alloca i64
call ptr @TestBitAnd
call ptr @TestBitOr
call ptr @TestBitXor
call ptr @TestBitNot
store 0, ptr %0
br label exit
return:
br label exit
exit:
%1 = load i64, ptr %0
ret i64 %1
}

