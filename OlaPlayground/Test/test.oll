Module ID : test.ola

declare @Assert void(i8)


declare @AssertMsg void(i8,ptr)


define internal @TestIfElseBasic void() {
entry:
%0 = alloca i64
%1 = alloca i64
if.then:
call i8 1, @Assert
br label if.end
if.else:
call i8 0, @Assert
br label if.end
if.end:
br label exit
exit:
ret 
}


define internal @TestIfElseMultipleConditions void() {
entry:
%0 = alloca i64
%1 = alloca i64
if.then:
call i8 0, @Assert
br label if.end
if.else:
if.end:
br label exit
if.then1:
call i8 0, @Assert
br label if.end1
if.else1:
call i8 1, @Assert
br label if.end1
if.end1:
br label if.end
exit:
ret 
}


define internal @TestNestedIfElse void() {
entry:
%0 = alloca i64
%1 = srem i64 42, 2
%2 = icmp eq i64 %1, 0
br i8 %2, label if.then, label if.else
if.then:
if.else:
call i8 0, @Assert
br label if.end
if.end:
br label exit
if.then1:
call i8 1, @Assert
br label if.end1
if.else1:
call i8 0, @Assert
br label if.end1
if.end1:
br label if.end
exit:
ret 
}


define internal @TestComplexNestedIfElse void() {
entry:
%0 = alloca i64
%1 = alloca i64
%2 = alloca i64
if.then:
if.else:
if.end:
br label exit
if.then1:
if.else1:
call i8 0, @Assert
br label if.end1
if.end1:
br label if.end
if.then2:
call i8 1, @Assert
br label if.end2
if.else2:
call i8 0, @Assert
br label if.end2
if.end2:
br label if.end1
if.then3:
call i8 0, @Assert
br label if.end3
if.else3:
if.end3:
br label if.end
if.then4:
call i8 0, @Assert
br label if.end4
if.else4:
call i8 0, @Assert
br label if.end4
if.end4:
br label if.end3
exit:
ret 
}


define internal @TestIfElseLogicalOperators void() {
entry:
%0 = alloca i64
%1 = and i8 1, 1
%2 = icmp ne i8 %1, 0
br i8 %2, label if.then, label if.else
if.then:
call i8 1, @Assert
br label if.end
if.else:
call i8 0, @Assert
br label if.end
if.end:
br label exit
exit:
ret 
}


define external @main i64() {
entry:
%0 = alloca i64
call ptr @TestIfElseBasic
call ptr @TestIfElseMultipleConditions
call ptr @TestNestedIfElse
call ptr @TestComplexNestedIfElse
call ptr @TestIfElseLogicalOperators
br label exit
return:
br label exit
exit:
ret i64 0
}

