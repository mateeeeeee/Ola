import std.assert;

// Global variables
int GlobalIntX = 8;
int GlobalIntY = 3;

void TestShiftOperatorsIntegers()
{
    // Local variables
    int localIntA = 5;
    int localIntB = 2;

    // Literal - Literal
    Assert((4 << 1) == 8);
    Assert((4 >> 1) == 2);

    // Global - Literal
    Assert(GlobalIntX << 1 == 16);
    Assert(GlobalIntX >> 1 == 4);

    // Literal - Global
    Assert(4 << GlobalIntY == 32);
    Assert(4 >> GlobalIntY == 0);

    // Local - Literal
    Assert(localIntA << 1 == 10);
    Assert(localIntA >> 1 == 2);

    // Literal - Local
    Assert(4 << localIntB == 16);
    Assert(4 >> localIntB == 1);

    // Global - Local
    Assert(GlobalIntX << localIntB == 32);
    Assert(GlobalIntX >> localIntB == 2);

    // Local - Global
    Assert(localIntA << GlobalIntY == 40);
    Assert(localIntA >> GlobalIntY == 0);

    // Local - Local
    Assert(localIntA << localIntB == 20);
    Assert(localIntA >> localIntB == 1);

    // Global - Global
    Assert(GlobalIntX << GlobalIntY == 64);
    Assert(GlobalIntX >> GlobalIntY == 1);
}

void TestCompoundShiftOperatorsIntegers()
{
    // Local variables
    int localIntA = 5;
    int localIntB = 2;

    // Local - Literal compound operations
    localIntA <<= 2;
    Assert(localIntA == 20);
    localIntA >>= 2;
    Assert(localIntA == 5);

    // Literal - Local compound operations (not directly possible, so we use an intermediate)
    int temp = 4;
    temp <<= localIntB;
    Assert(temp == 16);
    temp = 16; // Reset for the next test
    temp >>= localIntB;
    Assert(temp == 4);

    // Local - Global compound operations
    localIntA <<= GlobalIntY;
    Assert(localIntA == 40);
    localIntA >>= GlobalIntY;
    Assert(localIntA == 5);

    // Global - Literal compound operations
    GlobalIntX <<= 1;
    Assert(GlobalIntX == 16);
    GlobalIntX >>= 1;
    Assert(GlobalIntX == 8);

    // Global - Local compound operations
    GlobalIntX <<= localIntB;
    Assert(GlobalIntX == 32);
    GlobalIntX >>= localIntB;
    Assert(GlobalIntX == 8);

    // Global - Global compound operations
    GlobalIntX <<= GlobalIntY;
    Assert(GlobalIntX == 64);
    GlobalIntX >>= GlobalIntY;
    Assert(GlobalIntX == 8);

    // Resetting GlobalIntX for subsequent tests if necessary
    GlobalIntX = 8;
}

public int main()
{
    TestShiftOperatorsIntegers();
    TestCompoundShiftOperatorsIntegers();

    return 0;
}