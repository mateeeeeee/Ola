import std.assert;

void TestForLoopInt()
{
    int sum = 0;
    for (int i = 1; i <= 5; i++)
    {
        sum += i;
    }
    Assert(sum == 15);
}

void TestForLoopManualIncrement()
{
    int sum = 0;
    int i = 1;
    for (; i <= 5;)
    {
        sum += i;
        i += 2; // Manual increment by 2
    }
    Assert(sum == 9);
}

void TestForLoopMultipleExpressions()
{
    int sum = 0;
    for (int i = 1, j = 5; i <= 3; i++, j--)
    {
        sum += i + j;
    }
    Assert(sum == 18);
}

void TestNestedForLoops()
{
    int outerCounter = 0;
    int innerCounter = 0;
    int iterations = 0;
    for (; outerCounter < 3; outerCounter++)
    {
        for (; innerCounter < 2; innerCounter++)
        {
            ++iterations;
        }
    }

    Assert(outerCounter == 3);
    Assert(innerCounter == 2);
}
void TestNestedForLoopsReset()
{
    int outerCounter = 0;
    int totalIterations = 0;

    for (; outerCounter < 3; outerCounter++)
    {
        for (int j = 0; j < 2; j++)
        {
            totalIterations++;
        }
    }
    Assert(outerCounter == 3);
    //Assert(totalIterations == 6); todo: fails with optimizations
}

void TestForLoopWithBreak()
{
    int sum = 0;

    for (int i = 1; i <= 5; i++)
    {
        sum += i;
        if (i == 3) break;
    }

    Assert(sum == 6);
}

void TestForLoopWithContinue()
{
    int sum = 0;

    for (int i = 1; i <= 5; i++)
    {
        if (i == 3) continue;
        sum += i;
    }

    Assert(sum == 12);
}
void TestForLoopEmptyBody()
{
    int count = 0;
    int i = 0; 
    for (;i < 5; i++) 
    {
        // Empty body, just to increment i
    }
    Assert(count == 0); 
    Assert(i == 5);     
}
void TestForLoopNeverExecutes()
{
    int sum = 0;
    for (int i = 10; i < 5; i++) {
        sum += i; 
    }
    Assert(sum == 0);
}
void TestForLoopFloatCondition()
{
    float sum = 0.0;
    for (float i = 0.1; i < 0.95; i += 0.1)
    {
        sum += i;
    }
    Assert(sum > 4.49 && sum < 4.51);
}

public int main()
{
    TestForLoopInt();
    TestForLoopManualIncrement();
    TestForLoopMultipleExpressions();
    TestNestedForLoops();
    TestNestedForLoopsReset();
    TestForLoopWithBreak();
    TestForLoopWithContinue();
    TestForLoopEmptyBody();
    TestForLoopNeverExecutes();
    TestForLoopFloatCondition();
    return 0;
}