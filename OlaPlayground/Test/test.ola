import std.assert;

int TestIfElse()
{
	int a = 6;
	if(a > 5) return 10;
	else return 0;
}

int TestWhile()
{
	int a = 0;
	while(a < 10)
	{
		if (a == 5) return a * 2;
		++a;
	}
	return 0;
}
int TestMultipleReturns()
{
    int x = 5;
    if (x < 0) return -1;
    else if (x == 0) return 0;
    else if (x > 0) return 1;
    return -999; // Should never reach this point, but included for completeness
}
int TestEarlyReturnInLoop()
{
    for (int i = 0; i < 10; i++)
    {
        if (i == 5) return i;
    }
    return -1; // Should never reach here if the return in the loop works correctly
}
int TestNestedReturn()
{
    for (int i = 0; i < 3; i++)
    {
        if (i == 1)
        {
            for (int j = 0; j < 2; j++)
            {
                if (j == 1) return i * j; // Should return 1 * 1 = 1
            }
        }
    }
    return -1; // Should not reach here if nested return works correctly
}
void TestVoidWithEarlyReturn()
{
    int sum = 0;
    for (int i = 1; i <= 10; i++)
    {
        sum += i;
        if (sum > 30) return;
    }
    Assert(false); // This should not be reached
}

void TestVoidWithEarlyReturnCheck()
{
    TestVoidWithEarlyReturn(); // Should not assert if it returns early
}

public int main()
{
	Assert(TestIfElse() == 10);
	Assert(TestWhile() == 10);
	Assert(TestMultipleReturns() == 1);
	Assert(TestEarlyReturnInLoop() == 5);
    Assert(TestNestedReturn() == 1);
    TestVoidWithEarlyReturn();
	return 0;
}