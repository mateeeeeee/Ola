import std.assert;

void TestDoWhileLoopInt()
{
    int sum = 0;
    int i = 1;

    do
    {
        sum += i;
        i++;
    } while (i <= 5);

    Assert(sum == 15);
}

void TestDoWhileLoopBool()
{
    bool condition = true;
    int iterations = 0;

    do
    {
        iterations++;
        if (iterations == 3)
        {
            condition = false;
        }
    } while (condition);

    Assert(iterations == 3);
}

void TestNestedDoWhileLoops()
{
    int outerCounter = 0;
    int innerCounter = 0;

    do
    {
        do
        {
            innerCounter++;
        } while (innerCounter < 2);

        outerCounter++;
    } while (outerCounter < 3);

    Assert(outerCounter == 3);
    Assert(innerCounter == 4);
}

void TestDoWhileLoopWithBreak()
{
    int sum = 0;
    int i = 1;

    do
    {
        sum += i;
        i++;

        if (i > 5)
        {
            break;
        }
    } while (true);

    Assert(sum == 15);
}

void TestDoWhileLoopWithContinue()
{
    int sum = 0;
    int i = 0;
    
    do
    {
        i++;
    
        if (i % 2 == 0)
        {
            continue;
        }
    
        sum += i;
    } while (i < 5);
    
    Assert(sum == 9);
}

void TestEmptyDoWhileLoop()
{
    int i = 0;
    do 
    {
        // Empty body
    } while (++i < 2);
    Assert(i == 2);
}
void TestDoWhileLoopBoundary()
{
    int i = 5;
    int count = 0;
    do 
    {
        count++;
    } while (i < 5);
    Assert(count == 1);
}
noopt void TestDoWhileLoopWithMultipleVariables()
{
    int a = 1, b = 1;
    do 
    {
        int temp = a;
        a = b;
        b = temp + b;
    } while (b < 10);
    Assert(a == 8 && b == 13); //todo: fails with optimizations
}
void TestDoWhileLoopComplexCondition()
{
    int x = 0;
    int y = 3;
    do 
    {
        x++;
        y--;
    } while (x < 3 && y > 0);
    Assert(x == 3 && y == 0);
}
void TestDoWhileLoopChangingCondition()
{
    int i = 0;
    int sum = 0;
    do
    {
        i++;
        if (i == 3) // Change the loop condition mid-loop
        {
            i = 10; // Skip some iterations
        }
        sum += i;
    } while (i < 5);
    Assert(sum == 13); // (1 + 2 + 10) = 13 
}
void TestDoWhileLoopMultipleExits()
{
    int count = 0;
    bool foundValue = false;
    do
    {
        count++;
        if (count == 5)
        {
            foundValue = true;
            break;
        }
        if (count > 10)
        {
            break; // Another exit condition to prevent infinite loop if something goes wrong
        }
    } while (true);

    Assert(count == 5);
    Assert(foundValue);
}

public int main()
{
    TestDoWhileLoopInt();
    TestDoWhileLoopBool();
    TestNestedDoWhileLoops();
    TestDoWhileLoopWithBreak();
    TestDoWhileLoopWithContinue();
    TestEmptyDoWhileLoop();
    TestDoWhileLoopBoundary();
    TestDoWhileLoopWithMultipleVariables();
    TestDoWhileLoopComplexCondition();
    TestDoWhileLoopChangingCondition();
    TestDoWhileLoopMultipleExits();
    return 0;
}