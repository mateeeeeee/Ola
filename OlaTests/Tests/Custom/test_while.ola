import std.assert;

void TestWhileLoopInt()
{
    int sum = 0;
    int i = 1;

    while (i <= 5)
    {
        sum += i;
        i++;
    }

    Assert(sum == 15);
}

void TestWhileLoopBool()
{
    bool condition = true;
    int iterations = 0;

    while (condition)
    {
        iterations++;
        if (iterations == 3)
        {
            condition = false;
        }
    }

    Assert(iterations == 3);
}

void TestNestedWhileLoops()
{
    int outerCounter = 0;
    int innerCounter = 0;

    while (outerCounter < 3)
    {
        while (innerCounter < 2)
        {
            innerCounter++;
        }

        outerCounter++;
    }

    Assert(outerCounter == 3);
    Assert(innerCounter == 2);
}

void TestWhileLoopWithBreak()
{
    int sum = 0;
    int i = 1;

    while (true)
    {
        sum += i;
        i++;

        if (i > 5)
        {
            break;
        }
    }

    Assert(sum == 15);
}

void TestWhileLoopWithContinue()
{
    int sum = 0;
    int i = 0;
    
    while (i < 5)
    {
        i++;
    
        if (i % 2 == 0)
        {
            continue;
        }
    
        sum += i;
    }
    
    Assert(sum == 9);
}
void TestWhileLoopMultipleExits()
{
    int count = 0;
    bool foundValue = false;

    while (count < 5 && !foundValue)
    {
        count++;
        if (count == 3)
        {
            foundValue = true;
        }
    }

    Assert(count == 3);
    Assert(foundValue);
}
void TestWhileLoopExternalDeclaration()
{
    int i = 0;
    int sum = 0;
    while (i < 5)
    {
        sum += i;
        i++;
    }
    Assert(sum == 10);
}
void TestWhileLoopWithCalculation()
{
    int x = 10;
    int count = 0;

    while (x > 0)
    {
        x -= 2;
        count++;
    }

    Assert(count == 5);
}
void TestWhileLoopFloatCondition()
{
    float sum = 0.0;
    float i = 0.1;

    while (i < 0.99)
    {
        sum += i;
        i += 0.1; // Note: Floating-point precision might cause issues here
    }
    
    // Due to floating-point imprecision, we might not get exactly 4.5,
    // so we'll check within a range.
    Assert(sum > 4.49 && sum < 4.51);
}

public int main()
{
    TestWhileLoopInt();
    TestWhileLoopBool();
    TestNestedWhileLoops();
    TestWhileLoopWithBreak();
    TestWhileLoopWithContinue();
    TestWhileLoopMultipleExits();
    TestWhileLoopExternalDeclaration();
    TestWhileLoopWithCalculation();
    TestWhileLoopFloatCondition();
    return 0;
}