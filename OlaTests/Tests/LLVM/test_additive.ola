import std.assert;

// Globals for addition tests
int global_int_1 = 5;
int global_int_2 = 10;
int global_int_3 = 7;
int global_int_4 = 20;

// Globals for subtraction tests
int global_sub_1 = 15;
int global_sub_2 = 7;
int global_sub_3 = 3;
int global_sub_4 = 30;

// Globals for float tests
float global_float_1 = 3.5;
float global_float_2 = 2.5;
float global_float_3 = 1.2;
float global_float_4 = 5.0;

// Globals for composite addition tests
int global_composite_add_a = 5;
int global_composite_add_b = 10;

// Globals for composite subtraction tests
int global_composite_sub_a = 15;
int global_composite_sub_b = 7;

// Globals for composite float addition tests
float global_composite_fadd_a = 3.5;
float global_composite_fadd_b = 2.5;

// Globals for composite float subtraction tests
float global_composite_fsub_a = 5.0;
float global_composite_fsub_b = 2.5;

// Globals for composite mixed tests
int global_composite_mix_add_int = 5;
float global_composite_mix_add_float = 3.5;
int global_composite_mix_sub_int = 15;
float global_composite_mix_sub_float = 5.0;

void TestIntAddition()
{
    // Adding literals
    int literal_result = 5 + 10;
    Assert(literal_result == 15);

    // Adding locals
    int local_a = 5;
    int local_b = 10;
    int local_result = local_a + local_b;
    Assert(local_result == 15);

    // Adding globals
    int global_result_1 = global_int_1 + global_int_2;
    Assert(global_result_1 == 15);

    // Mixing globals and locals
    int mix_result_1 = global_int_1 + local_b;
    Assert(mix_result_1 == 15);

    int mix_result_2 = local_a + global_int_3;
    Assert(mix_result_2 == 12);

    // Composite local-literal
    int local_x = 5;
    local_x += 10;
    Assert(local_x == 15);

    // Composite local-local
    int local_y = 5;
    int local_z = 10;
    local_y += local_z;
    Assert(local_y == 15);
    
    // Composite global-global
    global_composite_add_a += global_composite_add_b;
    Assert(global_composite_add_a == 15);

    // Composite global-literal
    global_composite_add_b += 5;
    Assert(global_composite_add_b == 15);

    // Composite global-local
    int local_w = 5;
    global_composite_add_a += local_w;
    Assert(global_composite_add_a == 20);
}

void TestIntSubtraction()
{
    // Subtracting literals
    int literal_result = 15 - 7;
    Assert(literal_result == 8);

    // Subtracting locals
    int local_a = 15;
    int local_b = 7;
    int local_result = local_a - local_b;
    Assert(local_result == 8);

    // Subtracting globals
    int global_result_1 = global_sub_1 - global_sub_2;
    Assert(global_result_1 == 8);

    // Mixing globals and locals
    int mix_result_1 = global_sub_4 - local_b;
    Assert(mix_result_1 == 23);

    int mix_result_2 = local_a - global_sub_3;
    Assert(mix_result_2 == 12);

    // Composite local-literal
    int local_x = 15;
    local_x -= 7;
    Assert(local_x == 8);

    // Composite local-local
    int local_y = 15;
    int local_z = 7;
    local_y -= local_z;
    Assert(local_y == 8);
    
    // Composite global-global
    global_composite_sub_a -= global_composite_sub_b;
    Assert(global_composite_sub_a == 8);

    // Composite global-literal
    global_composite_sub_b -= 7;
    Assert(global_composite_sub_b == 0);

    // Composite global-local
    int local_w = 7;
    global_composite_sub_a -= local_w;
    Assert(global_composite_sub_a == 1);
}

void TestFloatAddition()
{
   const float tolerance = 0.0001;
   
   // Adding literals
   float literal_result = 3.5 + 2.5;
   Assert(literal_result > 5.9999 && literal_result < 6.0001);
   
   // Adding locals
   float local_a = 3.5;
   float local_b = 2.5;
   float local_result = local_a + local_b;
   Assert(local_result > 5.9999 && local_result < 6.0001);
   
   // Adding globals
   float global_result_1 = global_float_1 + global_float_2;
   Assert(global_result_1 > 5.9999 && global_result_1 < 6.0001);
   
   // Mixing globals and locals
   float mix_result_1 = global_float_1 + local_b;
   Assert(mix_result_1 > 5.9999 && mix_result_1 < 6.0001);
   
   float mix_result_2 = local_a + global_float_3;
   Assert(mix_result_2 > 4.6999 && mix_result_2 < 4.7001);

   // Composite local-literal
    float local_x = 3.5;
    local_x += 2.5;
    Assert(local_x > 5.9999 && local_x < 6.0001);

    // Composite local-local
    float local_y = 3.5;
    float local_z = 2.5;
    local_y += local_z;
    Assert(local_y > 5.9999 && local_y < 6.0001);
    
    // Composite global-global
    global_composite_fadd_a += global_composite_fadd_b;
    Assert(global_composite_fadd_a > 5.9999 && global_composite_fadd_a < 6.0001);

    // Composite global-literal
    global_composite_fadd_b += 3.5;
    Assert(global_composite_fadd_b > 5.9999 && global_composite_fadd_b < 6.0001);

    // Composite global-local
    float local_w = 2.5;
    global_composite_fadd_a += local_w;
    Assert(global_composite_fadd_a > 8.4999 && global_composite_fadd_a < 8.5001);
}

void TestFloatSubtraction()
{
    const float tolerance = 0.0001;
    
    // Subtracting literals
    float literal_result = 5.0 - 2.5;
    Assert(literal_result > 2.4999 && literal_result < 2.5001);
    
    // Subtracting locals
    float local_a = 5.0;
    float local_b = 2.5;
    float local_result = local_a - local_b;
    Assert(local_result > 2.4999 && local_result < 2.5001);
    
    // Subtracting globals
    float global_result_1 = global_float_4 - global_float_2;
    Assert(global_result_1 > 2.4999 && global_result_1 < 2.5001);
    
    // Mixing globals and locals
    float mix_result_1 = global_float_4 - local_b;
    Assert(mix_result_1 > 2.4999 && mix_result_1 < 2.5001);
    
    float mix_result_2 = local_a - global_float_3;
    Assert(mix_result_2 > 3.7999 && mix_result_2 < 3.8001);

    // Composite local-literal
    float local_x = 5.0;
    local_x -= 2.5;
    Assert(local_x > 2.4999 && local_x < 2.5001);

    // Composite local-local
    float local_y = 5.0;
    float local_z = 2.5;
    local_y -= local_z;
    Assert(local_y > 2.4999 && local_y < 2.5001);
    
    // Composite global-global
    global_composite_fsub_a -= global_composite_fsub_b;
    Assert(global_composite_fsub_a > 2.4999 && global_composite_fsub_a < 2.5001);

    // Composite global-literal
    global_composite_fsub_b -= 2.5;
    Assert(global_composite_fsub_b > -0.0001 && global_composite_fsub_b < 0.0001);

    // Composite global-local
    float local_w = 2.5;
    global_composite_fsub_a -= local_w;
    Assert(global_composite_fsub_a > -0.0001 && global_composite_fsub_a < 0.0001);
}


void TestMixedTypeAddition()
{
    const float tolerance = 0.0001;
    
    // Global int + global float
    float result1 = global_int_1 + global_float_1;
    Assert(result1 > 8.4999 && result1 < 8.5001);

    // Local int + global float
    int local_int = 5;
    float result2 = local_int + global_float_2;
    Assert(result2 > 7.4999 && result2 < 7.5001);

    // Global int + local float
    float local_float = 2.5;
    float result3 = global_int_2 + local_float;
    Assert(result3 > 12.4999 && result3 < 12.5001);

    // Literal int + global float
    float result4 = 10 + global_float_3;
    Assert(result4 > 11.1999 && result4 < 11.2001);

    // Global int + literal float
    float result5 = global_int_3 + 3.5;
    Assert(result5 > 10.4999 && result5 < 10.5001);

    // Local int + literal float
    float result6 = local_int + 1.5;
    Assert(result6 > 6.4999 && result6 < 6.5001);

    // Composite float += int
    float local_float2 = 3.5;
    local_float2 += 5;
    Assert(local_float2 > 8.4999 && local_float2 < 8.5001);

    // Composite int += float
    int local_int2 = 5;
    local_int2 += 2.5;
    Assert(local_int2 == 7); 

    // Composite global float += local int
    int local_int_3 = 5;
    global_composite_mix_add_float += local_int_3;
    Assert(global_composite_mix_add_float > 8.4999 && global_composite_mix_add_float < 8.5001);

    // Composite global int += local float 
    float local_float_3 = 2.5;
    global_composite_mix_add_int += local_float_3;
    Assert(global_composite_mix_add_int == 7); // Note: This assumes truncation or rounding down for int += float

    // Composite global float += int literal
    global_composite_mix_add_float += 5;
    Assert(global_composite_mix_add_float > 13.4999 && global_composite_mix_add_float < 13.5001);

    // Composite global int += float literal
    global_composite_mix_add_int += 2.5;
    Assert(global_composite_mix_add_int == 9);
}

void TestMixedTypeSubtraction()
{
    const float tolerance = 0.0001;
    
    // Global float - global int
    float result1 = global_float_4 - global_int_3;
    Assert(result1 > -2.0001 && result1 < -1.9999);

    // Local float - global int
    float local_float = 5.0;
    float result2 = local_float - global_int_2;
    Assert(result2 > -5.0001 && result2 < -4.9999);
    
    // Global float - local int
    int local_int = 3;
    float result3 = global_float_2 - local_int;
    Assert(result3 > -0.5001 && result3 < -0.4999);
    
    // Literal float - global int
    float result4 = 7.5 - global_int_1;
    Assert(result4 > 2.4999 && result4 < 2.5001);
    
    // Global float - literal int
    float result5 = global_float_1 - 2;
    Assert(result5 > 1.4999 && result5 < 1.5001);
    
    // Local float - literal int
    float result6 = local_float - 2;
    Assert(result6 > 2.9999 && result6 < 3.0001);

    // Composite float -= int
    float local_float2 = 5.0;
    local_float2 -= 3;
    Assert(local_float2 > 1.9999 && local_float2 < 2.0001);

    // Composite int -= float
    int local_int2 = 15;
    local_int2 -= 2.5;
    Assert(local_int2 == 12); // Note: This assumes truncation or rounding down for int -= float

    // Composite global float -= local int
    int local_int_3 = 3;
    global_composite_mix_sub_float -= local_int_3;
    Assert(global_composite_mix_sub_float > 1.9999 && global_composite_mix_sub_float < 2.0001);

    // Composite global int -= local float
    float local_float_3 = 2.5;
    global_composite_mix_sub_int -= local_float_3;
    Assert(global_composite_mix_sub_int == 12); // Note: This assumes truncation or rounding down for int -= float

    // Composite global float -= int literal
    global_composite_mix_sub_float -= 2;
    Assert(global_composite_mix_sub_float > -0.0001 && global_composite_mix_sub_float < 0.0001);

    // Composite global int -= float literal
    global_composite_mix_sub_int -= 2.5;
    Assert(global_composite_mix_sub_int == 9);
}


public int main()
{
    TestIntAddition();
    TestIntSubtraction();
    TestFloatAddition();
    TestFloatSubtraction();
    TestMixedTypeAddition();
    TestMixedTypeSubtraction();
    
    return 0;
}