import std.assert;

void TestIntBitwiseAnd()
{
    int a = 5;    // 0101 in binary
    int b = 3;    // 0011 in binary

    int resultAnd = a & b;  // 0001 in binary
    Assert(resultAnd == 1);

    a &= b;
    Assert(a == 1);
}

void TestIntBitwiseOr()
{
    int a = 5;    // 0101 in binary
    int b = 3;    // 0011 in binary

    int resultOr = a | b;   // 0111 in binary
    Assert(resultOr == 7);

    a |= b;
    Assert(a == 7);
}

void TestIntBitwiseXor()
{
    int a = 5;    // 0101 in binary
    int b = 3;    // 0011 in binary

    int resultXor = a ^ b;  // 0110 in binary
    Assert(resultXor == 6);

    a ^= b;
    Assert(a == 6);
}

void TestIntBitwiseNot()
{
    int s = 5;
    int resultNotS = ~s; 
    Assert(resultNotS == -6); 
    
    int t = -1;
    int resultNotT = ~t; 
    Assert(resultNotT == 0);
    
    int u = 0;
    int resultNotU = ~u;  
    Assert(resultNotU == -1); 
    
    int v = 255;  
    int resultNotV = ~v;  
    Assert(resultNotV == -256);   
    
    int z = 65535;  
    int resultNotZ = ~z;  
    Assert(resultNotZ == -65536); 
}

void TestBoolBitOperators()
{
    bool p = true;
    bool q = false;

    bool resultAnd = p & q;
    Assert(resultAnd == false);

    p &= q;
    Assert(p == false);

    bool resultOr = p | q;
    Assert(resultOr == false);

    p |= q;
    Assert(p == false);

    bool resultXor = p ^ q;
    Assert(resultXor == false);

    p ^= q;
    Assert(p == false);

    bool resultNotP = ~p;
    Assert(resultNotP == true);

    bool resultNotQ = ~q;
    Assert(resultNotQ == true);
}

public int main()
{
    TestIntBitwiseAnd();
    TestIntBitwiseOr();
    TestIntBitwiseXor();
    TestIntBitwiseNot();
    TestBoolBitOperators();

    return 0;
}