import std.assert;


int Add(int a, int b)
{
    return a + b;
}

float Multiply(float x, float y)
{
    return x * y;
}

bool LogicalAnd(bool p, bool q)
{
    return p && q;
}

float MixParams(int a, float b, bool c, int[] arr, int size)
{
    int arrSum = 0;
    for (int i = 0; i < size; i++)  arrSum += arr[i];
    return a + b + (c ? 1.0 : 0.0) + arrSum;
}

void ConcatArrays(int[] arr1, int size1, int[] arr2, int size2, int[] result)
{
    for (int i = 0; i < size1; i++)
    {
        result[i] = arr1[i];
    }

    for (int j = 0; j < size2; j++)
    {
        result[size1 + j] = arr2[j];
    }
}

public int main()
{
    Assert(Add(3, 5) == 8);

    Assert(Multiply(2.5, 3.0) == 7.5);

    Assert(LogicalAnd(true, false) == false);

    int[2] mixArr = {10, 20};
    float mixResult = MixParams(1, 2.5, true, mixArr, length(mixArr));
    Assert(mixResult == 34.5);

    int[2] arr1 = {1,2};
    int[2] arr2 = {3,4};
    int[length(arr1) + length(arr2)] arr3;
    ConcatArrays(arr1, length(arr1), arr2, length(arr2), arr3);
    Assert(arr3[0] == 1);
    Assert(arr3[1] == 2);
    Assert(arr3[2] == 3);
    Assert(arr3[3] == 4);
    return 0;
}