import std.assert;

void TestIfElseBasic()
{
    int x = 10;
    int y = 20;

    if (x < y) Assert(true);
    else Assert(false);
}

void TestIfElseMultipleConditions()
{
    int a = 5;
    int b = 5;

    if (a > b)
    {
        Assert(false);
    }
    else if (a < b)
    {
        Assert(false);
    }
    else
    {
        Assert(true);
    }
}

void TestNestedIfElse()
{
    int num = 42;

    if (num > 21)
    {
        if (num > 0)  Assert(true);
        else Assert(false);
    }
    else Assert(false);

}

void TestComplexNestedIfElse()
{
    int i = 1, j = 5, k = 5;

    if (i > 0)
    {
        if (j < 10)
        {
            if (k == 5) Assert(true); // Condition met: i > 0, j < 10, k == 5
            else  Assert(false); 
        }
        else
        {
            Assert(false);
        }
    }
    else
    {
        if (j == 0)  Assert(false); 
        else
        {
            if (k > 0) Assert(false); 
            else  Assert(false); 
        }
    }
}

void TestIfElseLogicalOperators()
{
    int value = 15;
    if (value > 10) // && value < 20)
    {
        Assert(true);
    }
    else
    {
        Assert(false);
    }
}
void TestShortCircuitEvaluation()
{
    int a = 1, b = 0;

    // Testing short-circuiting with '&&'
    if (a < 0 && (b / a) == 0) // Should not divide by zero due to short-circuit
    {
        Assert(false); // This block should never be reached due to short-circuiting
    }
    else
    {
        Assert(true); // This should be executed because 'a < 0' is false
    }

    // Testing short-circuiting with '||'
    if (a > 0 || (b / a) == 0) // Should not divide by zero due to short-circuit
    {
        Assert(true); // Here, 'a > 0' is true, so the second condition isn't evaluated
    }
    else
    {
        Assert(false); // This should not be executed
    }
}
void TestIfElseFloatComparisons()
{
    float a = 0.1 + 0.2; 
    float b = 0.3;

    if (a - b < 0.0001 && a - b > -0.0001)
    {
        Assert(true); // Floating-point comparison with tolerance
    }
    else
    {
        Assert(false);
    }
}

void TestIfElseWithBooleanLiterals()
{
    bool flag = true;
    if (flag) 
    {
        Assert(true);
    }
    else
    {
        Assert(false);
    }

    flag = false;
    if (!flag)
    {
        Assert(true);
    }
    else
    {
        Assert(false);
    }
}

public int main()
{
    TestIfElseBasic();
    TestIfElseMultipleConditions();
    TestNestedIfElse();
    TestComplexNestedIfElse();
    TestIfElseLogicalOperators();
    TestIfElseWithBooleanLiterals();
    TestShortCircuitEvaluation();
    return 0;
}